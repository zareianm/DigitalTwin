definitions:
  database.Machine:
    properties:
      input_parameters:
        type: string
      machine_id:
        type: integer
      name:
        type: string
      output_parameters:
        type: string
    type: object
  database.Task:
    properties:
      cron_spec:
        type: string
      id:
        type: integer
      last_run:
        type: string
      name:
        type: string
      payload:
        type: string
    type: object
  database.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  main.SaveJobResult:
    properties:
      errors:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: A rest API in Go using Gin framework
  title: Go Gin Rest API
  version: "1.0"
paths:
  /api/v1/jobs/create:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new job
      parameters:
      - description: C++ source file to scan
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.SaveJobResult'
      summary: Creates a new job
      tags:
      - jobs
  /api/v1/jobs/scheduleTask:
    post:
      consumes:
      - application/json
      description: schedules a task
      parameters:
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/database.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.SaveJobResult'
      summary: schedules a task
      tags:
      - jobs
  /api/v1/machines:
    get:
      consumes:
      - application/json
      description: Returns all machines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Machine'
            type: array
      summary: Returns all machines
      tags:
      - machines
  /api/v1/machines/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing machine
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Deletes an existing machine
      tags:
      - machines
    get:
      consumes:
      - application/json
      description: Returns a single machine
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Machine'
      summary: Returns a single machine
      tags:
      - machines
  /api/v1/machines/create:
    post:
      consumes:
      - application/json
      description: Creates a new machine
      parameters:
      - description: Machine
        in: body
        name: machine
        required: true
        schema:
          $ref: '#/definitions/database.Machine'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Machine'
      security:
      - BearerAuth: []
      summary: Creates a new machine
      tags:
      - machines
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Returns all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.User'
            type: array
      summary: Returns all users
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Deletes an existing user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Returns a single user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
      summary: Returns a single user
      tags:
      - users
  /api/v1/users/create:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.User'
      security:
      - BearerAuth: []
      summary: Creates a new user
      tags:
      - users
  /api/v1/users/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
      security:
      - BearerAuth: []
      summary: Updates an existing user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
